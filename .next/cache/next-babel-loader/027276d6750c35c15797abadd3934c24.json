{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nvar postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  var fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(id) {\n  var fullPath, fileContents, matterResult, processedContent, contentHtml;\n  return _regeneratorRuntime.async(function getPostData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n          fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n          matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(remark().use(html).process(matterResult.content));\n\n        case 5:\n          processedContent = _context.sent;\n          contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n          return _context.abrupt(\"return\", _objectSpread({\n            id: id,\n            contentHtml: contentHtml\n          }, matterResult.data));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/tmytrn/portfolio-tmytrn/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","use","content","processedContent","contentHtml","toString"],"mappings":";;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACjC;AACA,MAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,MAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC3C;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF2C,CAI3C;;AACA,QAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,QAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN2C,CAQ3C;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAT2C,CAW3C;;AACA;AACIH,MAAAA,EAAE,EAAFA;AADJ,OAEOK,YAAY,CAACC,IAFpB;AAIH,GAhBoB,CAArB,CAHiC,CAoBjC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC/B,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACjB,aAAO,CAAP;AACH,KAFD,MAEO;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GANM,CAAP;AAOH;AAED,OAAO,SAASC,aAAT,GAAyB;AAC5B,MAAMhB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAD4B,CAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOK,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC7B,WAAO;AACHa,MAAAA,MAAM,EAAE;AACJZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADA;AADL,KAAP;AAKH,GANM,CAAP;AAOH;AAED,OAAO,SAAeY,WAAf,CAA2Bb,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGE,UAAAA,QADH,GACchB,IAAI,CAACK,IAAL,CAAUD,cAAV,YAA6BU,EAA7B,SADd;AAEGG,UAAAA,YAFH,GAEkBlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAFlB,EAIH;;AACMG,UAAAA,YALH,GAKkBlB,MAAM,CAACgB,YAAD,CALxB,EAOH;;AAPG;AAAA,2CAS4Bf,MAAM,GAChC0B,GAD0B,CACtBzB,IADsB,EAE1BG,OAF0B,CAElBa,YAAY,CAACU,OAFK,CAT5B;;AAAA;AASGC,UAAAA,gBATH;AAYGC,UAAAA,WAZH,GAYiBD,gBAAgB,CAACE,QAAjB,EAZjB,EAcH;;AAdG;AAgBClB,YAAAA,EAAE,EAAFA,EAhBD;AAiBCiB,YAAAA,WAAW,EAAXA;AAjBD,aAkBIZ,YAAY,CAACC,IAlBjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n    // Get file names under /posts\n    const fileNames = fs.readdirSync(postsDirectory)\n    const allPostsData = fileNames.map(fileName => {\n        // Remove \".md\" from file name to get id\n        const id = fileName.replace(/\\.md$/, '')\n\n        // Read markdown file as string\n        const fullPath = path.join(postsDirectory, fileName)\n        const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n        // Use gray-matter to parse the post metadata section\n        const matterResult = matter(fileContents)\n\n        // Combine the data with the id\n        return {\n            id,\n            ...matterResult.data\n        }\n    })\n    // Sort posts by date\n    return allPostsData.sort((a, b) => {\n        if (a.date < b.date) {\n            return 1\n        } else {\n            return -1\n        }\n    })\n}\n\nexport function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n\n    // Returns an array that looks like this:\n    // [\n    //   {\n    //     params: {\n    //       id: 'ssg-ssr'\n    //     }\n    //   },\n    //   {\n    //     params: {\n    //       id: 'pre-rendering'\n    //     }\n    //   }\n    // ]\n    return fileNames.map(fileName => {\n        return {\n            params: {\n                id: fileName.replace(/\\.md$/, '')\n            }\n        }\n    })\n}\n\nexport async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    // Use remark to convert markdown into HTML string\n\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n    const contentHtml = processedContent.toString()\n\n    // Combine the data with the id and contentHtml\n    return {\n        id,\n        contentHtml,\n        ...matterResult.data\n    }\n}\n"]},"metadata":{},"sourceType":"module"}